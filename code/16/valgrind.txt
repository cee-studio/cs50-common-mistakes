==20211== Memcheck, a memory error detector
==20211== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==20211== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==20211== Command: ./b card.raw
==20211== 
==20211== Use of uninitialised value of size 8
==20211==    at 0x48BE7E4: fclose@@GLIBC_2.2.5 (iofclose.c:48)
==20211==    by 0x401412: main (recover.c:81)
==20211== 
==20211== Invalid read of size 4
==20211==    at 0x48BE7E4: fclose@@GLIBC_2.2.5 (iofclose.c:48)
==20211==    by 0x401412: main (recover.c:81)
==20211==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==20211== 
==20211== 
==20211== Process terminating with default action of signal 11 (SIGSEGV)
==20211==  Access not within mapped region at address 0x0
==20211==    at 0x48BE7E4: fclose@@GLIBC_2.2.5 (iofclose.c:48)
==20211==    by 0x401412: main (recover.c:81)
==20211==  If you believe this happened as a result of a stack
==20211==  overflow in your program's main thread (unlikely but
==20211==  possible), you can try to increase the size of the
==20211==  main thread stack using the --main-stacksize= flag.
==20211==  The main thread stack size used in this run was 8388608.
==20211== 
==20211== HEAP SUMMARY:
==20211==     in use at exit: 552 bytes in 1 blocks
==20211==   total heap usage: 2 allocs, 1 frees, 4,648 bytes allocated
==20211== 
==20211== LEAK SUMMARY:
==20211==    definitely lost: 0 bytes in 0 blocks
==20211==    indirectly lost: 0 bytes in 0 blocks
==20211==      possibly lost: 0 bytes in 0 blocks
==20211==    still reachable: 552 bytes in 1 blocks
==20211==         suppressed: 0 bytes in 0 blocks
==20211== Rerun with --leak-check=full to see details of leaked memory
==20211== 
==20211== For counts of detected and suppressed errors, rerun with: -v
==20211== Use --track-origins=yes to see where uninitialised values come from
==20211== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
